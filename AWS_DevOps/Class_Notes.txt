
#########################
Day - 17 | 13th Sep. 2024
#########################	


Introduction to AWS DevOps Services :::

	IAM Service :::
	
		root user! at the Account level 
			- Email_ID 
			- Password 
			
		Create IAM User
		Add the User to User Group 
		Assign the Policies to the User/Group 
		
		
		
		AWS Resources can be accessed using :
			AWS Console 
			AWS CLI / API calls 


#########################
Day - 18 | 16th Sep. 2024
#########################	

	- DevOps of AWS
	
	- AWS CodeCommit :
		- Git based SCM Service!


	Code Commit 		# Repo Management 
	
	Code Build 			# Perform Automated Builds
	
	Code Deploy			# Deployment tool used to deploy the application artifacts to the target environment 
	
	Code Pipeline 		# CICD - Build Orchestration Tool 
						# It composed of CodeCommit, CodeBuild and CodeDeploy 
						# Automated Triggers 
						# Attach SNS 
						# AWS Cloudwatch 


	Code Deploy ::
	
		1. Create a IAM Role for Code Deploy. 
		
		2. Create a IAM Role for S3 to get full access and attach to EC2 Instance 
				- Create IAM Policy for s3 Bucket full access 
				- Create IAM Role and add this policy. 
				
		
			
			
#########################
Day - 19 | 17th Sep. 2024
#########################


	Code Deploy 
	
	Code Pipeline 


	Code Deploy ::
	
		1. Create a IAM Role for Code Deploy. 
		
		2. Create a IAM Role for S3 to get full access and attach to EC2 Instance 
				- Create IAM Policy for s3 Bucket full access 
				- Create IAM Role and add this policy. 

https://docs.aws.amazon.com/general/latest/gr/s3.html

		3. Deployment Agent : tcs_java-web_app_server1

https://docs.aws.amazon.com/codedeploy/latest/userguide/codedeploy-agent-operations-install-ubuntu.html

tcs_app_proj1_bkt1


tcs_webapp_pipeline1


CICD Pipeline ::::

	Pipeline / CodeDeploy :
	
		Target environments!
		
		Manual Configuration 
		
		IAC Tool :
		
			Terraform ::	
				- Is IAC Tool to provision/Manage the Any Resources in multi-cloud/On-Prem.
				
			CloudFormation Templates ::::
				- Is IAC Tool to provision/Manage the AWS Resources.
				- CloudFormation Scripts are written using json**/ygdsfdxzxzyctdt ddrtdml.

		AWS CodePipeline :::
		
			SCM_Checkout -> Build -> Deployed
			
			
			Tomcat web application server :::
				webapp	Folder ==> compare this folder as Elastic BeanStalk
				
			

#########################
Day - 20 | 18th Sep. 2024
#########################


	Demo using CloudFormation / Terraform 
	
	Monitoring Tools - AWS CloudWatch / CloudTrail / Prometheus/Grafana Setup
	


	How to use  Cloudformation on DevOps Perspective :::
	
	CI/CD Pipeline using CodePipeline Service 
	
	SCM_Checkout -> Build -> Deployed(Test) -> Upon Testing, Delete the Test_Server created by CFT


{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Resources": {
      "myInstance": {
          "Type": "AWS::EC2::Instance",
          "Metadata" : {
            "AWS::CloudFormation::Init": {
              "config": {
                "packages": {
                  "yum": {
                    "httpd" : []
                  }
                },
                "files": {
                  "/var/www/html/index.html": {
                    "content" : {"Fn::Join" : ["",[ "This is created by cfn-init" ] ]},
                    "mode"  : "000644",
                    "owner" : "root",
                    "group" : "root"
                  }
                },
                "commands": {
                  "StratApache":{
                    "command" : "service httpd start"
                  }
                }
              }
            }
          },
          "Properties": {
              "KeyName": "may20-keypair",
              "ImageId": "ami-067aaeea6813afbde",
              "InstanceType" : "t2.micro",
              "UserData": {
                  "Fn::Base64": {
                      "Fn::Join": [
                          "",
                          [
                            "#!/bin/bash -ex\n",
                            "yum install -y aws-cfn-bootstrap\n",
                            "# Install the files and packages from the metadata\n",
                            "/opt/aws/bin/cfn-init -v ",
                            "         --stack ", { "Ref" : "AWS::StackName" },
                            "         --resource myInstance ",
                            "         --region ", { "Ref" : "AWS::Region" }, "\n",
                            "# Signal the status from cfn-init\n",
                            "/opt/aws/bin/cfn-signal -e $? ",
                            "         --stack ", { "Ref" : "AWS::StackName" },
                            "         --resource myInstance",
                            "         --region ", { "Ref" : "AWS::Region" }, "\n"
                          ]
                      ]
                  }
              }
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT5M"
        }
      }
              }
    }
}	
Monitoring Tools - AWS CloudWatch / CloudTrail / Prometheus/Grafana Setup ::	


	Architecture of Monitoring Tools:
	
		Prometheus/Grafana/Dyna-trace/AWS Cloud Watch/Azure Monitor
		
		
	Monitoring Tools :;
	
		Managed Service Providers : 

			AWS Cloud Watch/Azure Monitor

		Self Managed Monitoring Servers ::
		
			Prometheus/Grafana/Dyna-trace
			
		
		Monitoring_Server 			== # Install the Monitroing Tool(Prometheus)
			Client_Machines 		== # Install the Monitoring Tool Agent


	Grafana :
			Infra-Structure Monitoring
					Prometheus/Grafana/Dyna-trace
					
			Application Monitoring 
					App-Dynamics / DataDog 
		



#########################
Day - 21 | 19th Sep. 2024
#########################

	AWS ElasticBeanStalk
	
	ECR 
	
	Connect to AWS using AWS CLI 
	
	work with docker images and publish to ECR 


Next ::

	Project and Assignments :::
	
		- Azure Pipeline - build & release pipeline 	any one project
		
		- AWS Pipeline Service 							one project
		
		- Open-Source DevOps Project					one project
	
	Assignments :::



Docker Commit :::

	- Used to create an Image based on the existing container.
	
	
AMI :

	- Create New AMI using the existing VM 
	
	
	Kubernetes --> Replicaset --> to replicate the pod instances 


	Auto-Scaling ::
	
		Horizontal scaling
			--> Process of Adding more nodes 
		
		Vertical Scaling 
			--> Process of Adding more Pods  


	Prod environment - Deployment Group : 10 Prod_servers 
	
		Horizontal scaling
			--> Process of Adding more servers to the Deployment Group  
		
		Vertical Scaling 
			--> Process of Adding more Configurations to the existing servers in Deployment Group  

-->

	AWS ElasticBeanStalk
	
	ECR 
	
	Connect to AWS using AWS CLI 
	
	work with docker images and publish to ECR 
	
	
	
	On the Build Server :
	
		Install and Setup the AWS Cli
		
		aws configure 		To configure the credential.
			- Access Key 
			- Secret Key 
			- Default Region 
			
		Python scripts ==> to handle aws resources 
		boto3 
	


loksaieta/sa-webappimg

Retrieve an authentication token and authenticate your Docker client to your registry. Use the AWS CLI:


Install AWS CLI 

aws configure 



A

ZvC

aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 471112633224.dkr.ecr.ap-south-1.amazonaws.com

Note: If you receive an error using the AWS CLI, make sure that you have the latest version of the AWS CLI and Docker installed.

Build your Docker image using the following command. For information on building a Docker file from scratch see the instructions here . You can skip this step if your image is already built:

docker build -t tcsecimgrepo1 .

After the build completes, tag your image so you can push the image to this repository:

docker tag tcsecimgrepo1:latest 471jjkjkj3224.dkr.ecr.ap-south-1.amazonaws.com/tcsecimgrepo1:latest

docker tag loksaieta/sa-webappimg:v1.0 471jjkjkj3224.dkr.ecr.ap-south-1.amazonaws.com/tcsecimgrepo1:latest


Run the following command to push this image to your newly created AWS repository:

docker push 471jjkjkj3224.dkr.ecr.ap-south-1.amazonaws.com/tcsecimgrepo1:latest



Next :::

	Azure Pipeline ::
	
		- Build Pipeline 	# Completed 
		
		- Release Pipeline  


#########################
Day - 22 | 20th Sep. 2024
#########################

	
	Azure DevOps Pipeline ::
	
		Terraform 
		
		AWS / Azure Resources! 
		
	



	Terraform 
		
		Azure Resources! 
		
		
		Install Azure Cli 			# Is a Command Line Utility to manage the Azure resource from external terminals/shell

			https://learn.microsoft.com/en-us/cli/azure/install-azure-cli-windows?tabs=azure-cli

			az --version 			
			
			
			
			az login --tenant 7ebca763-b9d8-4de8-bd9a-1ca01c201282			# Goto to Active Directory Service  to get the tenent ID 
																			# Goto to Subscription and verify the Subscription_ID
			
			az account show
			
			
			terraform --version 
			
			terraform init 
			
			terraform plan 
			
			terraform apply 



	CI/CD Pipeline ::
	
		Azure Pipeline - Container - Kubernetes 

			Azure 	- perform build 
			
			AWS 	- Deploy 			
			
		On Azure Project :
		
			Create Service Connection!
			
			Azure Container Registry! 
				- Service Connection from AzDevOps Project to AzContainer Registry 



	Service Account :::
	
		- DockerHub 
		
		- KubernetesMaster Node (AWS)

trigger:
- master

pool:
  vmImage: ubuntu-latest


resources:
- repo: self

steps:
- task: Maven@3
  inputs:
    mavenPomFile: 'pom.xml'
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: default
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    goals: 'package'
- task: CopyFiles@2
  inputs:
    Contents: '**/*.war'
    TargetFolder: '$(build.artifactstagingdirectory)'
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'mywebapp'
    publishLocation: 'Container'
- task: Docker@2
  inputs:
    containerRegistry: 'loksaietadkrhub'
    repository: 'loksaieta/tcsazimg'
    command: 'buildAndPush'
    Dockerfile: '**/Dockerfile'
    tags: 'latest'
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Pipeline.Workspace)'
    artifact: 'k8sconfigfiles'
    publishLocation: 'pipeline'
- task: CopyFilesOverSSH@0
  inputs:
    sshEndpoint: 'KMasterAWSSC1'
    sourceFolder: '$(System.DefaultWorkingDirectory)'
    contents: '**/k8smvndeployment.yaml'
    targetFolder: '/home/devopsadmin'
    readyTimeout: '20000'
- task: SSH@0
  inputs:
    sshEndpoint: 'KMasterAWSSC1'
    runOptions: 'commands'
    commands: 'kubectl apply -f k8smvndeployment.yaml'
    readyTimeout: '20000'
	
	
	
	
	
	AMI -> 
	
	VM - Install all the required tools 
	
	Create New AMI 

	Terraform Script, use this ami to create a vm 


	sh 'terraform init'
	
	
	
	sh 'terraform plan'
	
	sh 'terraform apply'
	













